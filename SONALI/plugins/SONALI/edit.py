from SONALI import app
from pyrogram import filters
import asyncio
import os

# OWNER_ID ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
OWNER_ID = int(os.getenv("OWNER_ID", 0))

# ‡§°‡§ø‡§´‡§º‡•â‡§≤‡•ç‡§ü ‡§è‡§°‡§ø‡§ü ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§∏‡§Æ‡§Ø (1 ‡§Æ‡§ø‡§®‡§ü)
edit_delete_time = 60  
edit_protection = False  # ‡§°‡§ø‡§´‡§º‡•â‡§≤‡•ç‡§ü ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§è‡§°‡§ø‡§ü ‡§™‡•ç‡§∞‡•ã‡§ü‡•á‡§ï‡•ç‡§∂‡§® ‡§¨‡§Ç‡§¶

@app.on_message(filters.command("edit on") & filters.group)
async def edit_on(client, message):
    global edit_protection
    if not message.from_user:
        return

    # ‡§è‡§°‡§Æ‡§ø‡§® ‡§Ø‡§æ OWNER_ID ‡§π‡•Ä ‡§∏‡•á‡§ü ‡§ï‡§∞ ‡§∏‡§ï‡•á
    if message.from_user.id != OWNER_ID and not message.from_user.is_admin:
        await message.reply_text("‚ùå *‡§ï‡•á‡§µ‡§≤ ‡§è‡§°‡§Æ‡§ø‡§® ‡§Ø‡§æ ‡§ì‡§®‡§∞ ‡§á‡§∏ ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç!*")
        return
    
    keyboard = [
        [{"text": "1 Min", "callback_data": "set_time_60"}],
        [{"text": "5 Min", "callback_data": "set_time_300"}],
        [{"text": "10 Min", "callback_data": "set_time_600"}],
        [{"text": "20 Min", "callback_data": "set_time_1200"}]
    ]
    
    edit_protection = True
    await message.reply_text(
        "üõë *Edit Protection Enabled!*\n\n‚è≥ Select the time after which edited messages will be deleted:", 
        reply_markup={"inline_keyboard": keyboard}
    )

@app.on_message(filters.command("edit off") & filters.group)
async def edit_off(client, message):
    global edit_protection
    if not message.from_user:
        return
    
    if message.from_user.id != OWNER_ID and not message.from_user.is_admin:
        await message.reply_text("‚ùå *‡§ï‡•á‡§µ‡§≤ ‡§è‡§°‡§Æ‡§ø‡§® ‡§Ø‡§æ ‡§ì‡§®‡§∞ ‡§á‡§∏ ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç!*")
        return
    
    edit_protection = False
    await message.reply_text("‚ùå *Edit Protection Disabled!*")

@app.on_callback_query()
async def callback_query_handler(client, callback_query):
    global edit_delete_time
    data = callback_query.data
    
    if data.startswith("set_time_"):
        edit_delete_time = int(data.split("_")[2])  # ‡§∏‡§Æ‡§Ø ‡§®‡§ø‡§ï‡§æ‡§≤‡•á‡§Ç
        await callback_query.message.edit_text(f"‚úÖ Edit Protection Set to {edit_delete_time // 60} Min!")

@app.on_edited_message(filters.group)
async def delete_edited_message(client, message):
    global edit_protection, edit_delete_time
    if not edit_protection:
        return  # ‡§Ø‡§¶‡§ø ‡§è‡§°‡§ø‡§ü ‡§™‡•ç‡§∞‡•ã‡§ü‡•á‡§ï‡•ç‡§∂‡§® ‡§¨‡§Ç‡§¶ ‡§π‡•à, ‡§§‡•ã ‡§ï‡•Å‡§õ ‡§® ‡§ï‡§∞‡•á‡§Ç

    # ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡•á‡§Ç
    warning_msg = await message.reply_text(f"‚ö†Ô∏è *‡§Ü‡§™‡§ï‡§æ ‡§∏‡§Ç‡§™‡§æ‡§¶‡§ø‡§§ ‡§∏‡§Ç‡§¶‡•á‡§∂ {edit_delete_time // 60} ‡§Æ‡§ø‡§®‡§ü ‡§Æ‡•á‡§Ç ‡§π‡§ü‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ!*")
    
    await asyncio.sleep(edit_delete_time)  # ‡§®‡§ø‡§∞‡•ç‡§¶‡§ø‡§∑‡•ç‡§ü ‡§∏‡§Æ‡§Ø ‡§§‡§ï ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡•á‡§Ç
    await message.delete()  # ‡§∏‡§Ç‡§™‡§æ‡§¶‡§ø‡§§ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§π‡§ü‡§æ‡§è‡§Ç
    await warning_msg.delete()  # ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§π‡§ü‡§æ‡§è‡§Ç

print("Bot is Running...")
app.run()
